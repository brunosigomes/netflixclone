[{"C:\\Users\\Bruno\\Documents\\GitHub\\netflixclone\\src\\index.js":"1","C:\\Users\\Bruno\\Documents\\GitHub\\netflixclone\\src\\App.js":"2","C:\\Users\\Bruno\\Documents\\GitHub\\netflixclone\\src\\Tmdb.js":"3","C:\\Users\\Bruno\\Documents\\GitHub\\netflixclone\\src\\components\\MovieRow.js":"4","C:\\Users\\Bruno\\Documents\\GitHub\\netflixclone\\src\\components\\FeaturedMovie.js":"5","C:\\Users\\Bruno\\Documents\\GitHub\\netflixclone\\src\\components\\Header.js":"6"},{"size":196,"mtime":1609867454065,"results":"7","hashOfConfig":"8"},{"size":2003,"mtime":1609886747197,"results":"9","hashOfConfig":"8"},{"size":2306,"mtime":1609874034086,"results":"10","hashOfConfig":"8"},{"size":1789,"mtime":1609884667240,"results":"11","hashOfConfig":"8"},{"size":1729,"mtime":1609878870465,"results":"12","hashOfConfig":"8"},{"size":669,"mtime":1609880020369,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"8v0sa9",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"16"},"C:\\Users\\Bruno\\Documents\\GitHub\\netflixclone\\src\\index.js",[],["32","33"],"C:\\Users\\Bruno\\Documents\\GitHub\\netflixclone\\src\\App.js",["34"],"import React, { useEffect, useState } from 'react';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\n\nimport './App.css';\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [feateredData, setFeaterdeData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let choseInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaterdeData(choseInfo);\n    }\n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n  }, []);\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n\n      {feateredData &&\n        <FeaturedMovie item={feateredData} />\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n        Feito com <span role=\"img\" aria-label=\"coração\">❤️ por Bruno Gomes</span> <br/>\n        Direitos de imagem para Netflix <br/>\n        Dados pegos do site Themoviedb.org\n      </footer>\n\n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img src=\"https://media.tenor.com/images/8b27b9071617e0dfc275efdc79e3c51a/tenor.gif\" alt=\"Carregando\"/>\n        </div>\n      }\n    </div>\n  );\n}","C:\\Users\\Bruno\\Documents\\GitHub\\netflixclone\\src\\Tmdb.js",["35"],"const API_KEY = '84cc5e670b93b2b10b41a27495b078ec';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\nexport default {\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais do Netiflex',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para Você',\r\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n        ];\r\n    },\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {};\r\n\r\n        if (movieId) {\r\n            switch (type) {\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n                default:\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n}","C:\\Users\\Bruno\\Documents\\GitHub\\netflixclone\\src\\components\\MovieRow.js",["36"],"import React, { useState } from 'react';\r\nimport './MovieRow.css';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default ({title, items}) => {\r\n    const [scrollX, setScrollX] = useState(0);\r\n\r\n    const handleLeftArrow = () => {\r\n        let x = scrollX + Math.round(window.innerWidth / 2);\r\n        if(x > 0) {\r\n            x = 0;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    const handleRightArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth / 2);\r\n        let listW = items.results.length * 150;\r\n        if((window.innerWidth - listW) > x) {\r\n            x = (window.innerWidth - listW) - 60;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2> {title} </h2>\r\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n                <NavigateBeforeIcon style={{fontSize: 50}} />\r\n            </div>\r\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n                <NavigateNextIcon style={{fontSize: 50}} />\r\n            </div>\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                }}>\r\n                    {items.results.length > 0 && items.results.map((item, key) => (\r\n                        <div className=\"movieRow--item\" key={key}>\r\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title}/>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\Bruno\\Documents\\GitHub\\netflixclone\\src\\components\\FeaturedMovie.js",["37","38","39"],"import React from 'react';\r\nimport './FeaturedMovie.css';\r\n\r\nexport default ({ item }) => {\r\n\r\n    let firstDate = new Date(item.first_air_date);\r\n    let genres = [];\r\n    for (let i in item.genres) {\r\n        genres.push(item.genres[i].name);\r\n    }\r\n\r\n    return (\r\n        <section className=\"featured\" style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n        }}>\r\n            <div className=\"featured--vertical\">\r\n                <div className=\"featured--horizontal\">\r\n                    <div className=\"featured--name\">{item.original_name}</div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons === 1 ? '' : 's'}</div>\r\n                    </div>\r\n                    <div className=\"featured--description\">\r\n                        <p>{item.overview}</p>\r\n                    </div>\r\n                    <div className=\"featured--buttons\">\r\n                        <a href=\"#\" className=\"featured-watchbutton\">&#9654; Assistir</a>\r\n                        <a href=\"#\" className=\"featured-mylistbutton\">+ Minha Lista</a>\r\n                    </div>\r\n                    <div className=\"featured--genres\">\r\n                        <strong>Gêneros:</strong> {genres.join(\", \")}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","C:\\Users\\Bruno\\Documents\\GitHub\\netflixclone\\src\\components\\Header.js",["40"],"import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default ({black}) => {\r\n    return (\r\n        <header className={black ? 'black':''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://logodownload.org/wp-content/uploads/2014/10/netflix-logo-1-1.png\" alt=\"Netflix\" />\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/1bdc9a33850498.56ba69ac2ba5b.png\" alt=\"Usuário\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":9,"column":1,"nodeType":"47","endLine":72,"endColumn":2},{"ruleId":"45","severity":1,"message":"48","line":10,"column":1,"nodeType":"47","endLine":66,"endColumn":2},{"ruleId":"45","severity":1,"message":"46","line":6,"column":1,"nodeType":"47","endLine":49,"endColumn":2},{"ruleId":"45","severity":1,"message":"46","line":4,"column":1,"nodeType":"47","endLine":40,"endColumn":2},{"ruleId":"49","severity":1,"message":"50","line":30,"column":25,"nodeType":"51","endLine":30,"endColumn":70},{"ruleId":"49","severity":1,"message":"50","line":31,"column":25,"nodeType":"51","endLine":31,"endColumn":71},{"ruleId":"45","severity":1,"message":"46","line":4,"column":1,"nodeType":"47","endLine":19,"endColumn":2},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]